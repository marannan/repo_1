Goal:
We're going to attack the nstrcpy in target2 which copies to 241 instead of 240 due to a code bug.
With the attack we'll get access to sh with root access

Idea: 
We need to overflow the buffer with 241 byes with last byte used to overwrite the least significant byte of saved stack pointer. So with this when the function returns, the SFP will point to a new location and four bytes from the location will be the new EIP, which we'll tailor it to point back into our buffer where shellcode is ready to make the attack.


Steps:
1) Make the attack buffer and send over to strcpy with following recepie.
2) Add noop sled as a safe landing point for modified eip. This can be found by trail and error. 
3) Add shellcode from alephone.
4) Add the last byte to overwrite the least significant byte of SFP in bar() in a way in now points to a new location.
Four bytes from the new location is where new EIP should be.  We have to calculate this landing point using ESP/EBP in bar() to find a suitable address in buffer region which was overwitten by us.