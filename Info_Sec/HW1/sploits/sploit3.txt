Goal:
We're going to attack the memcpy in target3 which copies 240 with a bounds check on signed integer limit.
With the attack we'll get access to sh with root access

Idea: 
We need to overflow the the integer in a way it passes the bounds check but overflow the buffer while copying.
We can use a huge negative value for the count so that "if (count < MAX_WIDGETS)" will pass. But when this negative value is multiplied by 20 which will overflow the count variable resulting in a positive value more than 240*20 = 4200 to overwrite the buffer and EIP.


Steps:
1) Make the attack buffer and send over to strcpy with following recepie.
2) Add noop sled as a safe landing point for modified eip. This can be found by trail and error. 
3) Add the count value to the starting of the buffer. This count value is picked to be 2147483889 which when assigned to signed integer will overflow and become negative -2147483407. This will pass the bounds checking but when multiplied with 20 will again overflow the value and makes it 4280 which is good enough to overflow buf in foo() to overwrite EIP
4) Add the address (4 bytes) of landing point to be overwritten in the place of EIP. 
It can be found by knowing the ESP/EBP of foo() buffer is allocated to figure out buffer region address.